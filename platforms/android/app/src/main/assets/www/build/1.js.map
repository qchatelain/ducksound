{"version":3,"sources":["../../src/pages/reset-password/reset-password.module.ts","../../src/validators/email.ts","../../src/pages/reset-password/reset-password.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACK;AAUrD;IAAA;IAAsC,CAAC;IAA1B,uBAAuB;QARnC,uEAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,0EAAiB;aAClB;YACD,OAAO,EAAE;gBACP,sEAAe,CAAC,QAAQ,CAAC,0EAAiB,CAAC;aAC5C;SACF,CAAC;OACW,uBAAuB,CAAG;IAAD,8BAAC;CAAA;AAAH;;;;;;;;;ACVpC;AAAA;IAAA;IAeA,CAAC;IAdU,sBAAO,GAAd,UAAe,OAAoB;QAC/B,IAAM,EAAE,GAAG,4DAA4D;aAClE,IAAI,CACD,OAAO,CAAC,KAAK,CAChB,CAAC;QAEN,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;YACL,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;QAED,MAAM,CAAC;YACH,YAAY,EAAE,IAAI;SACrB,CAAC;IACN,CAAC;IACL,qBAAC;AAAD,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACjByC;AACuC;AACb;AACZ;AACC;AAEzD;;;;;GAKG;AAOH;IAIE,2BAAmB,OAAsB,EAAS,SAA0B,EAAS,YAA0B,EAAE,WAAwB,EAAS,SAAoB;QAAnJ,YAAO,GAAP,OAAO,CAAe;QAAS,cAAS,GAAT,SAAS,CAAiB;QAAS,iBAAY,GAAZ,YAAY,CAAc;QAAmC,cAAS,GAAT,SAAS,CAAW;QACpK,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,KAAK,CAAC;YACzC,KAAK,EAAE;gBACL,EAAE;gBACF,kEAAU,CAAC,OAAO,CAAC,CAAC,kEAAU,CAAC,QAAQ,EAAE,yEAAc,CAAC,OAAO,CAAC,CAAC;aAClE;SACF,CAAC,CAAC;IACL,CAAC;IAED,yCAAa,GAAb;QAAA,iBAgCC;QA/BC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;YAClC,OAAO,CAAC,GAAG,CACP,qCAAmC,IAAI,CAAC,iBAAiB,CAAC,KAAO,CACpE,CAAC;QACJ,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAM,KAAK,GAAW,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,KAAK,CAAC;YACzD,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,IAAI,CACvC,cAAI;gBACF,IAAM,KAAK,GAAU,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACzC,OAAO,EAAE,mCAAmC;oBAC5C,OAAO,EAAE;wBACP;4BACE,IAAI,EAAE,IAAI;4BACV,IAAI,EAAE,QAAQ;4BACd,OAAO,EAAE;gCACP,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;4BACrB,CAAC;yBACF;qBACF;iBACF,CAAC,CAAC;gBACH,KAAK,CAAC,OAAO,EAAE,CAAC;YAClB,CAAC,EACD,eAAK;gBACH,IAAM,UAAU,GAAG,KAAI,CAAC,SAAS,CAAC,MAAM,CAAC;oBACvC,OAAO,EAAE,KAAK,CAAC,OAAO;oBACtB,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC;iBAC1C,CAAC,CAAC;gBACH,UAAU,CAAC,OAAO,EAAE,CAAC;YACvB,CAAC,CACJ,CAAC;QACJ,CAAC;IACH,CAAC;IA7CU,iBAAiB;QAJ7B,wEAAS,CAAC;YACT,QAAQ,EAAE,qBAAqB;WACG;SACnC,CAAC;0BAKsK;OAJ3J,iBAAiB,CA8C7B;IAAD,CAAC;AAAA;SA9CY,iBAAiB,gB","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ResetPasswordPage } from './reset-password';\n\n@NgModule({\n  declarations: [\n    ResetPasswordPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ResetPasswordPage),\n  ],\n})\nexport class ResetPasswordPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.module.ts","import { FormControl } from '@angular/forms';\r\n\r\nexport class EmailValidator {\r\n    static isValid(control: FormControl) {\r\n        const re = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/\r\n            .test(\r\n                control.value\r\n            );\r\n\r\n        if (re) {\r\n            return null;\r\n        }\r\n\r\n        return {\r\n            invalidEmail: true\r\n        };\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./src/validators/email.ts","import { Component } from '@angular/core';\nimport { Alert, AlertController, IonicPage, NavController, NavParams } from 'ionic-angular';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { EmailValidator } from '../../validators/email';\nimport { AuthProvider } from '../../providers/auth/auth';\n\n/**\n * Generated class for the ResetPasswordPage page.\n *\n * See https://ionicframework.com/docs/components/#navigation for more info on\n * Ionic pages and navigation.\n */\n\n@IonicPage()\n@Component({\n  selector: 'page-reset-password',\n  templateUrl: 'reset-password.html',\n})\nexport class ResetPasswordPage {\n\n  public resetPasswordForm: FormGroup;\n\n  constructor(public navCtrl: NavController, public alertCtrl: AlertController, public authProvider: AuthProvider, formBuilder: FormBuilder, public navParams: NavParams) {\n    this.resetPasswordForm = formBuilder.group({\n      email: [\n        \"\",\n        Validators.compose([Validators.required, EmailValidator.isValid])\n      ]\n    });\n  }\n\n  resetPassword(): void {\n    if (!this.resetPasswordForm.valid) {\n      console.log(\n          `Form invalide, valeur actuelle: ${this.resetPasswordForm.value}`\n      );\n    } else {\n      const email: string = this.resetPasswordForm.value.email;\n      this.authProvider.resetPassword(email).then(\n          user => {\n            const alert: Alert = this.alertCtrl.create({\n              message: \"Un lien a été envoyé à ton email.\",\n              buttons: [\n                {\n                  text: \"Ok\",\n                  role: \"cancel\",\n                  handler: () => {\n                    this.navCtrl.pop();\n                  }\n                }\n              ]\n            });\n            alert.present();\n          },\n          error => {\n            const errorAlert = this.alertCtrl.create({\n              message: error.message,\n              buttons: [{ text: \"Ok\", role: \"cancel\" }]\n            });\n            errorAlert.present();\n          }\n      );\n    }\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/reset-password/reset-password.ts"],"sourceRoot":""}